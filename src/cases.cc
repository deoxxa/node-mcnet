/****************************************/
/* THIS FILE IS AUTOMATICALLY GENERATED */
/* PLEASE SEE support/generate_cases.js */
/****************************************/

case 0x00: {
  mcnet_packet_00_t* pkt = reinterpret_cast< mcnet_packet_00_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("id"), Number::New(pkt->id));

  break;
}
case 0x01: {
  mcnet_packet_01_t* pkt = reinterpret_cast< mcnet_packet_01_t* >(packet);

  object->Set(String::New("server_mode"), Boolean::New(pkt->server_mode == 1));

  object->Set(String::New("dimension"), Boolean::New(pkt->dimension == 1));

  object->Set(String::New("difficulty"), Boolean::New(pkt->difficulty == 1));

  object->Set(String::New("world_height"), Boolean::New(pkt->world_height == 1));

  object->Set(String::New("max_players"), Boolean::New(pkt->max_players == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("eid"), Number::New(pkt->eid));

  object->Set(String::New("server_mode"), Number::New(pkt->server_mode));

  object->Set(String::New("dimension"), Number::New(pkt->dimension));

  object->Set(String::New("difficulty"), Number::New(pkt->difficulty));

  object->Set(String::New("world_height"), Number::New(pkt->world_height));

  object->Set(String::New("max_players"), Number::New(pkt->max_players));

  Buffer* p_01_level_type_buffer = Buffer::New(pkt->level_type_len * 2);
  memcpy(Buffer::Data(p_01_level_type_buffer), pkt->level_type, pkt->level_type_len * 2);
  Handle< Value > p_01_level_type_args[3] = { p_01_level_type_buffer->handle_, Integer::New(pkt->level_type_len * 2), Integer::New(0) };
  object->Set(String::New("level_type"), buffer_constructor->NewInstance(3, p_01_level_type_args));

  break;
}
case 0x02: {
  mcnet_packet_02_t* pkt = reinterpret_cast< mcnet_packet_02_t* >(packet);

  object->Set(String::New("protocol_version"), Boolean::New(pkt->protocol_version == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("protocol_version"), Number::New(pkt->protocol_version));

  object->Set(String::New("port"), Number::New(pkt->port));

  Buffer* p_02_username_buffer = Buffer::New(pkt->username_len * 2);
  memcpy(Buffer::Data(p_02_username_buffer), pkt->username, pkt->username_len * 2);
  Handle< Value > p_02_username_args[3] = { p_02_username_buffer->handle_, Integer::New(pkt->username_len * 2), Integer::New(0) };
  object->Set(String::New("username"), buffer_constructor->NewInstance(3, p_02_username_args));

  Buffer* p_02_host_buffer = Buffer::New(pkt->host_len * 2);
  memcpy(Buffer::Data(p_02_host_buffer), pkt->host, pkt->host_len * 2);
  Handle< Value > p_02_host_args[3] = { p_02_host_buffer->handle_, Integer::New(pkt->host_len * 2), Integer::New(0) };
  object->Set(String::New("host"), buffer_constructor->NewInstance(3, p_02_host_args));

  break;
}
case 0x03: {
  mcnet_packet_03_t* pkt = reinterpret_cast< mcnet_packet_03_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  Buffer* p_03_data_buffer = Buffer::New(pkt->data_len * 2);
  memcpy(Buffer::Data(p_03_data_buffer), pkt->data, pkt->data_len * 2);
  Handle< Value > p_03_data_args[3] = { p_03_data_buffer->handle_, Integer::New(pkt->data_len * 2), Integer::New(0) };
  object->Set(String::New("data"), buffer_constructor->NewInstance(3, p_03_data_args));

  break;
}
case 0x04: {
  mcnet_packet_04_t* pkt = reinterpret_cast< mcnet_packet_04_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("time"), Number::New(pkt->time));

  break;
}
case 0x05: {
  mcnet_packet_05_t* pkt = reinterpret_cast< mcnet_packet_05_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("eid"), Number::New(pkt->eid));

  object->Set(String::New("slot"), Number::New(pkt->slot));

  object->Set(String::New("itemid"), Number::New(pkt->itemid));

  object->Set(String::New("damage"), Number::New(pkt->damage));

  break;
}
case 0x06: {
  mcnet_packet_06_t* pkt = reinterpret_cast< mcnet_packet_06_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("x"), Number::New(pkt->x));

  object->Set(String::New("y"), Number::New(pkt->y));

  object->Set(String::New("z"), Number::New(pkt->z));

  break;
}
case 0x07: {
  mcnet_packet_07_t* pkt = reinterpret_cast< mcnet_packet_07_t* >(packet);

  object->Set(String::New("mouse"), Boolean::New(pkt->mouse == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("user"), Number::New(pkt->user));

  object->Set(String::New("target"), Number::New(pkt->target));

  object->Set(String::New("mouse"), Number::New(pkt->mouse));

  break;
}
case 0x08: {
  mcnet_packet_08_t* pkt = reinterpret_cast< mcnet_packet_08_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("health"), Number::New(pkt->health));

  object->Set(String::New("hunger"), Number::New(pkt->hunger));

  object->Set(String::New("saturation"), Number::New(pkt->saturation));

  break;
}
case 0x09: {
  mcnet_packet_09_t* pkt = reinterpret_cast< mcnet_packet_09_t* >(packet);

  object->Set(String::New("difficulty"), Boolean::New(pkt->difficulty == 1));

  object->Set(String::New("server_mode"), Boolean::New(pkt->server_mode == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("dimension"), Number::New(pkt->dimension));

  object->Set(String::New("difficulty"), Number::New(pkt->difficulty));

  object->Set(String::New("server_mode"), Number::New(pkt->server_mode));

  object->Set(String::New("world_height"), Number::New(pkt->world_height));

  Buffer* p_09_level_type_buffer = Buffer::New(pkt->level_type_len * 2);
  memcpy(Buffer::Data(p_09_level_type_buffer), pkt->level_type, pkt->level_type_len * 2);
  Handle< Value > p_09_level_type_args[3] = { p_09_level_type_buffer->handle_, Integer::New(pkt->level_type_len * 2), Integer::New(0) };
  object->Set(String::New("level_type"), buffer_constructor->NewInstance(3, p_09_level_type_args));

  break;
}
case 0x0A: {
  mcnet_packet_0A_t* pkt = reinterpret_cast< mcnet_packet_0A_t* >(packet);

  object->Set(String::New("on_ground"), Boolean::New(pkt->on_ground == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("on_ground"), Number::New(pkt->on_ground));

  break;
}
case 0x0B: {
  mcnet_packet_0B_t* pkt = reinterpret_cast< mcnet_packet_0B_t* >(packet);

  object->Set(String::New("on_ground"), Boolean::New(pkt->on_ground == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("x"), Number::New(pkt->x));

  object->Set(String::New("y"), Number::New(pkt->y));

  object->Set(String::New("stance"), Number::New(pkt->stance));

  object->Set(String::New("z"), Number::New(pkt->z));

  object->Set(String::New("on_ground"), Number::New(pkt->on_ground));

  break;
}
case 0x0C: {
  mcnet_packet_0C_t* pkt = reinterpret_cast< mcnet_packet_0C_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("yaw"), Number::New(pkt->yaw));

  object->Set(String::New("pitch"), Number::New(pkt->pitch));

  break;
}
case 0x0D: {
  mcnet_packet_0D_t* pkt = reinterpret_cast< mcnet_packet_0D_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("x"), Number::New(pkt->x));

  object->Set(String::New("y"), Number::New(pkt->y));

  object->Set(String::New("stance"), Number::New(pkt->stance));

  object->Set(String::New("z"), Number::New(pkt->z));

  object->Set(String::New("yaw"), Number::New(pkt->yaw));

  object->Set(String::New("pitch"), Number::New(pkt->pitch));

  break;
}
case 0x0E: {
  mcnet_packet_0E_t* pkt = reinterpret_cast< mcnet_packet_0E_t* >(packet);

  object->Set(String::New("status"), Boolean::New(pkt->status == 1));

  object->Set(String::New("y"), Boolean::New(pkt->y == 1));

  object->Set(String::New("face"), Boolean::New(pkt->face == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("status"), Number::New(pkt->status));

  object->Set(String::New("x"), Number::New(pkt->x));

  object->Set(String::New("y"), Number::New(pkt->y));

  object->Set(String::New("z"), Number::New(pkt->z));

  object->Set(String::New("face"), Number::New(pkt->face));

  break;
}
case 0x0F: {
  mcnet_packet_0F_t* pkt = reinterpret_cast< mcnet_packet_0F_t* >(packet);

  object->Set(String::New("status"), Boolean::New(pkt->status == 1));

  object->Set(String::New("y"), Boolean::New(pkt->y == 1));

  object->Set(String::New("direction"), Boolean::New(pkt->direction == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("status"), Number::New(pkt->status));

  object->Set(String::New("x"), Number::New(pkt->x));

  object->Set(String::New("y"), Number::New(pkt->y));

  object->Set(String::New("z"), Number::New(pkt->z));

  object->Set(String::New("direction"), Number::New(pkt->direction));

  object->Set(String::New("px"), Number::New(pkt->px));

  object->Set(String::New("py"), Number::New(pkt->py));

  object->Set(String::New("pz"), Number::New(pkt->pz));

  break;
}
case 0x10: {
  mcnet_packet_10_t* pkt = reinterpret_cast< mcnet_packet_10_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("slot_id"), Number::New(pkt->slot_id));

  break;
}
case 0x11: {
  mcnet_packet_11_t* pkt = reinterpret_cast< mcnet_packet_11_t* >(packet);

  object->Set(String::New("unused"), Boolean::New(pkt->unused == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("eid"), Number::New(pkt->eid));

  object->Set(String::New("unused"), Number::New(pkt->unused));

  object->Set(String::New("x"), Number::New(pkt->x));

  object->Set(String::New("y"), Number::New(pkt->y));

  object->Set(String::New("z"), Number::New(pkt->z));

  break;
}
case 0x12: {
  mcnet_packet_12_t* pkt = reinterpret_cast< mcnet_packet_12_t* >(packet);

  object->Set(String::New("animation"), Boolean::New(pkt->animation == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("eid"), Number::New(pkt->eid));

  object->Set(String::New("animation"), Number::New(pkt->animation));

  break;
}
case 0x13: {
  mcnet_packet_13_t* pkt = reinterpret_cast< mcnet_packet_13_t* >(packet);

  object->Set(String::New("action"), Boolean::New(pkt->action == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("eid"), Number::New(pkt->eid));

  object->Set(String::New("action"), Number::New(pkt->action));

  break;
}
case 0x14: {
  mcnet_packet_14_t* pkt = reinterpret_cast< mcnet_packet_14_t* >(packet);

  object->Set(String::New("yaw"), Boolean::New(pkt->yaw == 1));

  object->Set(String::New("pitch"), Boolean::New(pkt->pitch == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("eid"), Number::New(pkt->eid));

  object->Set(String::New("x"), Number::New(pkt->x));

  object->Set(String::New("y"), Number::New(pkt->y));

  object->Set(String::New("z"), Number::New(pkt->z));

  object->Set(String::New("yaw"), Number::New(pkt->yaw));

  object->Set(String::New("pitch"), Number::New(pkt->pitch));

  object->Set(String::New("current_item"), Number::New(pkt->current_item));

  Buffer* p_14_name_buffer = Buffer::New(pkt->name_len * 2);
  memcpy(Buffer::Data(p_14_name_buffer), pkt->name, pkt->name_len * 2);
  Handle< Value > p_14_name_args[3] = { p_14_name_buffer->handle_, Integer::New(pkt->name_len * 2), Integer::New(0) };
  object->Set(String::New("name"), buffer_constructor->NewInstance(3, p_14_name_args));

  break;
}
case 0x15: {
  mcnet_packet_15_t* pkt = reinterpret_cast< mcnet_packet_15_t* >(packet);

  object->Set(String::New("count"), Boolean::New(pkt->count == 1));

  object->Set(String::New("rotation"), Boolean::New(pkt->rotation == 1));

  object->Set(String::New("pitch"), Boolean::New(pkt->pitch == 1));

  object->Set(String::New("roll"), Boolean::New(pkt->roll == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("eid"), Number::New(pkt->eid));

  object->Set(String::New("item_id"), Number::New(pkt->item_id));

  object->Set(String::New("count"), Number::New(pkt->count));

  object->Set(String::New("damage"), Number::New(pkt->damage));

  object->Set(String::New("x"), Number::New(pkt->x));

  object->Set(String::New("y"), Number::New(pkt->y));

  object->Set(String::New("z"), Number::New(pkt->z));

  object->Set(String::New("rotation"), Number::New(pkt->rotation));

  object->Set(String::New("pitch"), Number::New(pkt->pitch));

  object->Set(String::New("roll"), Number::New(pkt->roll));

  break;
}
case 0x16: {
  mcnet_packet_16_t* pkt = reinterpret_cast< mcnet_packet_16_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("eid"), Number::New(pkt->eid));

  object->Set(String::New("collected_by"), Number::New(pkt->collected_by));

  break;
}
case 0x17: {
  mcnet_packet_17_t* pkt = reinterpret_cast< mcnet_packet_17_t* >(packet);

  object->Set(String::New("type"), Boolean::New(pkt->type == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("eid"), Number::New(pkt->eid));

  object->Set(String::New("type"), Number::New(pkt->type));

  object->Set(String::New("x"), Number::New(pkt->x));

  object->Set(String::New("y"), Number::New(pkt->y));

  object->Set(String::New("z"), Number::New(pkt->z));

  object->Set(String::New("thrower"), Number::New(pkt->thrower));

  object->Set(String::New("speed_x"), Number::New(pkt->speed_x));

  object->Set(String::New("speed_y"), Number::New(pkt->speed_y));

  object->Set(String::New("speed_z"), Number::New(pkt->speed_z));

  break;
}
case 0x18: {
  mcnet_packet_18_t* pkt = reinterpret_cast< mcnet_packet_18_t* >(packet);

  object->Set(String::New("type"), Boolean::New(pkt->type == 1));

  object->Set(String::New("yaw"), Boolean::New(pkt->yaw == 1));

  object->Set(String::New("pitch"), Boolean::New(pkt->pitch == 1));

  object->Set(String::New("head_yaw"), Boolean::New(pkt->head_yaw == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("eid"), Number::New(pkt->eid));

  object->Set(String::New("type"), Number::New(pkt->type));

  object->Set(String::New("x"), Number::New(pkt->x));

  object->Set(String::New("y"), Number::New(pkt->y));

  object->Set(String::New("z"), Number::New(pkt->z));

  object->Set(String::New("yaw"), Number::New(pkt->yaw));

  object->Set(String::New("pitch"), Number::New(pkt->pitch));

  object->Set(String::New("head_yaw"), Number::New(pkt->head_yaw));

  break;
}
case 0x19: {
  mcnet_packet_19_t* pkt = reinterpret_cast< mcnet_packet_19_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("eid"), Number::New(pkt->eid));

  object->Set(String::New("x"), Number::New(pkt->x));

  object->Set(String::New("y"), Number::New(pkt->y));

  object->Set(String::New("z"), Number::New(pkt->z));

  object->Set(String::New("direction"), Number::New(pkt->direction));

  Buffer* p_19_title_buffer = Buffer::New(pkt->title_len * 2);
  memcpy(Buffer::Data(p_19_title_buffer), pkt->title, pkt->title_len * 2);
  Handle< Value > p_19_title_args[3] = { p_19_title_buffer->handle_, Integer::New(pkt->title_len * 2), Integer::New(0) };
  object->Set(String::New("title"), buffer_constructor->NewInstance(3, p_19_title_args));

  break;
}
case 0x1A: {
  mcnet_packet_1A_t* pkt = reinterpret_cast< mcnet_packet_1A_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("eid"), Number::New(pkt->eid));

  object->Set(String::New("x"), Number::New(pkt->x));

  object->Set(String::New("y"), Number::New(pkt->y));

  object->Set(String::New("z"), Number::New(pkt->z));

  object->Set(String::New("count"), Number::New(pkt->count));

  break;
}
case 0x1C: {
  mcnet_packet_1C_t* pkt = reinterpret_cast< mcnet_packet_1C_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("eid"), Number::New(pkt->eid));

  object->Set(String::New("x"), Number::New(pkt->x));

  object->Set(String::New("y"), Number::New(pkt->y));

  object->Set(String::New("z"), Number::New(pkt->z));

  break;
}
case 0x1D: {
  mcnet_packet_1D_t* pkt = reinterpret_cast< mcnet_packet_1D_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("eid"), Number::New(pkt->eid));

  break;
}
case 0x1E: {
  mcnet_packet_1E_t* pkt = reinterpret_cast< mcnet_packet_1E_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("eid"), Number::New(pkt->eid));

  break;
}
case 0x1F: {
  mcnet_packet_1F_t* pkt = reinterpret_cast< mcnet_packet_1F_t* >(packet);

  object->Set(String::New("x"), Boolean::New(pkt->x == 1));

  object->Set(String::New("y"), Boolean::New(pkt->y == 1));

  object->Set(String::New("z"), Boolean::New(pkt->z == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("eid"), Number::New(pkt->eid));

  object->Set(String::New("x"), Number::New(pkt->x));

  object->Set(String::New("y"), Number::New(pkt->y));

  object->Set(String::New("z"), Number::New(pkt->z));

  break;
}
case 0x20: {
  mcnet_packet_20_t* pkt = reinterpret_cast< mcnet_packet_20_t* >(packet);

  object->Set(String::New("yaw"), Boolean::New(pkt->yaw == 1));

  object->Set(String::New("pitch"), Boolean::New(pkt->pitch == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("eid"), Number::New(pkt->eid));

  object->Set(String::New("yaw"), Number::New(pkt->yaw));

  object->Set(String::New("pitch"), Number::New(pkt->pitch));

  break;
}
case 0x21: {
  mcnet_packet_21_t* pkt = reinterpret_cast< mcnet_packet_21_t* >(packet);

  object->Set(String::New("x"), Boolean::New(pkt->x == 1));

  object->Set(String::New("y"), Boolean::New(pkt->y == 1));

  object->Set(String::New("z"), Boolean::New(pkt->z == 1));

  object->Set(String::New("yaw"), Boolean::New(pkt->yaw == 1));

  object->Set(String::New("pitch"), Boolean::New(pkt->pitch == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("eid"), Number::New(pkt->eid));

  object->Set(String::New("x"), Number::New(pkt->x));

  object->Set(String::New("y"), Number::New(pkt->y));

  object->Set(String::New("z"), Number::New(pkt->z));

  object->Set(String::New("yaw"), Number::New(pkt->yaw));

  object->Set(String::New("pitch"), Number::New(pkt->pitch));

  break;
}
case 0x22: {
  mcnet_packet_22_t* pkt = reinterpret_cast< mcnet_packet_22_t* >(packet);

  object->Set(String::New("yaw"), Boolean::New(pkt->yaw == 1));

  object->Set(String::New("pitch"), Boolean::New(pkt->pitch == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("eid"), Number::New(pkt->eid));

  object->Set(String::New("x"), Number::New(pkt->x));

  object->Set(String::New("y"), Number::New(pkt->y));

  object->Set(String::New("z"), Number::New(pkt->z));

  object->Set(String::New("yaw"), Number::New(pkt->yaw));

  object->Set(String::New("pitch"), Number::New(pkt->pitch));

  break;
}
case 0x23: {
  mcnet_packet_23_t* pkt = reinterpret_cast< mcnet_packet_23_t* >(packet);

  object->Set(String::New("yaw"), Boolean::New(pkt->yaw == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("eid"), Number::New(pkt->eid));

  object->Set(String::New("yaw"), Number::New(pkt->yaw));

  break;
}
case 0x26: {
  mcnet_packet_26_t* pkt = reinterpret_cast< mcnet_packet_26_t* >(packet);

  object->Set(String::New("status"), Boolean::New(pkt->status == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("eid"), Number::New(pkt->eid));

  object->Set(String::New("status"), Number::New(pkt->status));

  break;
}
case 0x27: {
  mcnet_packet_27_t* pkt = reinterpret_cast< mcnet_packet_27_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("eid"), Number::New(pkt->eid));

  object->Set(String::New("attached_to"), Number::New(pkt->attached_to));

  break;
}
case 0x28: {
  mcnet_packet_28_t* pkt = reinterpret_cast< mcnet_packet_28_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("eid"), Number::New(pkt->eid));

  break;
}
case 0x29: {
  mcnet_packet_29_t* pkt = reinterpret_cast< mcnet_packet_29_t* >(packet);

  object->Set(String::New("effect"), Boolean::New(pkt->effect == 1));

  object->Set(String::New("amplification"), Boolean::New(pkt->amplification == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("eid"), Number::New(pkt->eid));

  object->Set(String::New("effect"), Number::New(pkt->effect));

  object->Set(String::New("amplification"), Number::New(pkt->amplification));

  object->Set(String::New("duration"), Number::New(pkt->duration));

  break;
}
case 0x2A: {
  mcnet_packet_2A_t* pkt = reinterpret_cast< mcnet_packet_2A_t* >(packet);

  object->Set(String::New("effect"), Boolean::New(pkt->effect == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("eid"), Number::New(pkt->eid));

  object->Set(String::New("effect"), Number::New(pkt->effect));

  break;
}
case 0x2B: {
  mcnet_packet_2B_t* pkt = reinterpret_cast< mcnet_packet_2B_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("experience_bar"), Number::New(pkt->experience_bar));

  object->Set(String::New("level"), Number::New(pkt->level));

  object->Set(String::New("experience"), Number::New(pkt->experience));

  break;
}
case 0x32: {
  mcnet_packet_32_t* pkt = reinterpret_cast< mcnet_packet_32_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("x"), Number::New(pkt->x));

  object->Set(String::New("z"), Number::New(pkt->z));

  break;
}
case 0x33: {
  mcnet_packet_33_t* pkt = reinterpret_cast< mcnet_packet_33_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("x"), Number::New(pkt->x));

  object->Set(String::New("z"), Number::New(pkt->z));

  object->Set(String::New("primary_bitmap"), Number::New(pkt->primary_bitmap));

  object->Set(String::New("add_bitmap"), Number::New(pkt->add_bitmap));

  object->Set(String::New("data_len"), Number::New(pkt->data_len));

  object->Set(String::New("unused"), Number::New(pkt->unused));

  Buffer* p_33_data_buffer = Buffer::New(pkt->data_len);
  memcpy(Buffer::Data(p_33_data_buffer), pkt->data, pkt->data_len);
  Handle< Value > p_33_data_args[3] = { p_33_data_buffer->handle_, Integer::New(pkt->data_len), Integer::New(0) };
  object->Set(String::New("data"), buffer_constructor->NewInstance(3, p_33_data_args));

  break;
}
case 0x34: {
  mcnet_packet_34_t* pkt = reinterpret_cast< mcnet_packet_34_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("x"), Number::New(pkt->x));

  object->Set(String::New("z"), Number::New(pkt->z));

  object->Set(String::New("count"), Number::New(pkt->count));

  object->Set(String::New("data_len"), Number::New(pkt->data_len));

  Buffer* p_34_data_buffer = Buffer::New(pkt->data_len);
  memcpy(Buffer::Data(p_34_data_buffer), pkt->data, pkt->data_len);
  Handle< Value > p_34_data_args[3] = { p_34_data_buffer->handle_, Integer::New(pkt->data_len), Integer::New(0) };
  object->Set(String::New("data"), buffer_constructor->NewInstance(3, p_34_data_args));

  break;
}
case 0x35: {
  mcnet_packet_35_t* pkt = reinterpret_cast< mcnet_packet_35_t* >(packet);

  object->Set(String::New("y"), Boolean::New(pkt->y == 1));

  object->Set(String::New("type"), Boolean::New(pkt->type == 1));

  object->Set(String::New("meta"), Boolean::New(pkt->meta == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("x"), Number::New(pkt->x));

  object->Set(String::New("y"), Number::New(pkt->y));

  object->Set(String::New("z"), Number::New(pkt->z));

  object->Set(String::New("type"), Number::New(pkt->type));

  object->Set(String::New("meta"), Number::New(pkt->meta));

  break;
}
case 0x36: {
  mcnet_packet_36_t* pkt = reinterpret_cast< mcnet_packet_36_t* >(packet);

  object->Set(String::New("one"), Boolean::New(pkt->one == 1));

  object->Set(String::New("two"), Boolean::New(pkt->two == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("x"), Number::New(pkt->x));

  object->Set(String::New("y"), Number::New(pkt->y));

  object->Set(String::New("z"), Number::New(pkt->z));

  object->Set(String::New("one"), Number::New(pkt->one));

  object->Set(String::New("two"), Number::New(pkt->two));

  break;
}
case 0x3C: {
  mcnet_packet_3C_t* pkt = reinterpret_cast< mcnet_packet_3C_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("x"), Number::New(pkt->x));

  object->Set(String::New("y"), Number::New(pkt->y));

  object->Set(String::New("z"), Number::New(pkt->z));

  object->Set(String::New("radius"), Number::New(pkt->radius));

  object->Set(String::New("count"), Number::New(pkt->count));

  Buffer* p_3C_data_buffer = Buffer::New(pkt->count * 3);
  memcpy(Buffer::Data(p_3C_data_buffer), pkt->data, pkt->count * 3);
  Handle< Value > p_3C_data_args[3] = { p_3C_data_buffer->handle_, Integer::New(pkt->count * 3), Integer::New(0) };
  object->Set(String::New("data"), buffer_constructor->NewInstance(3, p_3C_data_args));

  break;
}
case 0x3D: {
  mcnet_packet_3D_t* pkt = reinterpret_cast< mcnet_packet_3D_t* >(packet);

  object->Set(String::New("y"), Boolean::New(pkt->y == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("effect_id"), Number::New(pkt->effect_id));

  object->Set(String::New("x"), Number::New(pkt->x));

  object->Set(String::New("y"), Number::New(pkt->y));

  object->Set(String::New("z"), Number::New(pkt->z));

  object->Set(String::New("data"), Number::New(pkt->data));

  break;
}
case 0x3E: {
  mcnet_packet_3E_t* pkt = reinterpret_cast< mcnet_packet_3E_t* >(packet);

  object->Set(String::New("volume"), Boolean::New(pkt->volume == 1));

  object->Set(String::New("pitch"), Boolean::New(pkt->pitch == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("x"), Number::New(pkt->x));

  object->Set(String::New("y"), Number::New(pkt->y));

  object->Set(String::New("z"), Number::New(pkt->z));

  object->Set(String::New("volume"), Number::New(pkt->volume));

  object->Set(String::New("pitch"), Number::New(pkt->pitch));

  Buffer* p_3E_name_buffer = Buffer::New(pkt->name_len * 2);
  memcpy(Buffer::Data(p_3E_name_buffer), pkt->name, pkt->name_len * 2);
  Handle< Value > p_3E_name_args[3] = { p_3E_name_buffer->handle_, Integer::New(pkt->name_len * 2), Integer::New(0) };
  object->Set(String::New("name"), buffer_constructor->NewInstance(3, p_3E_name_args));

  break;
}
case 0x46: {
  mcnet_packet_46_t* pkt = reinterpret_cast< mcnet_packet_46_t* >(packet);

  object->Set(String::New("reason"), Boolean::New(pkt->reason == 1));

  object->Set(String::New("mode"), Boolean::New(pkt->mode == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("reason"), Number::New(pkt->reason));

  object->Set(String::New("mode"), Number::New(pkt->mode));

  break;
}
case 0x47: {
  mcnet_packet_47_t* pkt = reinterpret_cast< mcnet_packet_47_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("eid"), Number::New(pkt->eid));

  object->Set(String::New("x"), Number::New(pkt->x));

  object->Set(String::New("y"), Number::New(pkt->y));

  object->Set(String::New("z"), Number::New(pkt->z));

  break;
}
case 0x64: {
  mcnet_packet_64_t* pkt = reinterpret_cast< mcnet_packet_64_t* >(packet);

  object->Set(String::New("window"), Boolean::New(pkt->window == 1));

  object->Set(String::New("type"), Boolean::New(pkt->type == 1));

  object->Set(String::New("slots"), Boolean::New(pkt->slots == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("window"), Number::New(pkt->window));

  object->Set(String::New("type"), Number::New(pkt->type));

  object->Set(String::New("slots"), Number::New(pkt->slots));

  Buffer* p_64_title_buffer = Buffer::New(pkt->title_len * 2);
  memcpy(Buffer::Data(p_64_title_buffer), pkt->title, pkt->title_len * 2);
  Handle< Value > p_64_title_args[3] = { p_64_title_buffer->handle_, Integer::New(pkt->title_len * 2), Integer::New(0) };
  object->Set(String::New("title"), buffer_constructor->NewInstance(3, p_64_title_args));

  break;
}
case 0x65: {
  mcnet_packet_65_t* pkt = reinterpret_cast< mcnet_packet_65_t* >(packet);

  object->Set(String::New("window"), Boolean::New(pkt->window == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("window"), Number::New(pkt->window));

  break;
}
case 0x66: {
  mcnet_packet_66_t* pkt = reinterpret_cast< mcnet_packet_66_t* >(packet);

  object->Set(String::New("window"), Boolean::New(pkt->window == 1));

  object->Set(String::New("right_click"), Boolean::New(pkt->right_click == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("window"), Number::New(pkt->window));

  object->Set(String::New("slot"), Number::New(pkt->slot));

  object->Set(String::New("right_click"), Number::New(pkt->right_click));

  object->Set(String::New("action"), Number::New(pkt->action));

  break;
}
case 0x67: {
  mcnet_packet_67_t* pkt = reinterpret_cast< mcnet_packet_67_t* >(packet);

  object->Set(String::New("window"), Boolean::New(pkt->window == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("window"), Number::New(pkt->window));

  object->Set(String::New("slot"), Number::New(pkt->slot));

  break;
}
case 0x68: {
  mcnet_packet_68_t* pkt = reinterpret_cast< mcnet_packet_68_t* >(packet);

  object->Set(String::New("window"), Boolean::New(pkt->window == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("window"), Number::New(pkt->window));

  object->Set(String::New("count"), Number::New(pkt->count));

  break;
}
case 0x69: {
  mcnet_packet_69_t* pkt = reinterpret_cast< mcnet_packet_69_t* >(packet);

  object->Set(String::New("window"), Boolean::New(pkt->window == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("window"), Number::New(pkt->window));

  object->Set(String::New("property"), Number::New(pkt->property));

  object->Set(String::New("value"), Number::New(pkt->value));

  break;
}
case 0x6A: {
  mcnet_packet_6A_t* pkt = reinterpret_cast< mcnet_packet_6A_t* >(packet);

  object->Set(String::New("window"), Boolean::New(pkt->window == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("window"), Number::New(pkt->window));

  object->Set(String::New("action"), Number::New(pkt->action));

  break;
}
case 0x6B: {
  mcnet_packet_6B_t* pkt = reinterpret_cast< mcnet_packet_6B_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("slot"), Number::New(pkt->slot));

  break;
}
case 0x6C: {
  mcnet_packet_6C_t* pkt = reinterpret_cast< mcnet_packet_6C_t* >(packet);

  object->Set(String::New("window"), Boolean::New(pkt->window == 1));

  object->Set(String::New("echantment"), Boolean::New(pkt->echantment == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("window"), Number::New(pkt->window));

  object->Set(String::New("echantment"), Number::New(pkt->echantment));

  break;
}
case 0x82: {
  mcnet_packet_82_t* pkt = reinterpret_cast< mcnet_packet_82_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("x"), Number::New(pkt->x));

  object->Set(String::New("y"), Number::New(pkt->y));

  object->Set(String::New("z"), Number::New(pkt->z));

  Buffer* p_82_line1_buffer = Buffer::New(pkt->line1_len * 2);
  memcpy(Buffer::Data(p_82_line1_buffer), pkt->line1, pkt->line1_len * 2);
  Handle< Value > p_82_line1_args[3] = { p_82_line1_buffer->handle_, Integer::New(pkt->line1_len * 2), Integer::New(0) };
  object->Set(String::New("line1"), buffer_constructor->NewInstance(3, p_82_line1_args));

  Buffer* p_82_line2_buffer = Buffer::New(pkt->line2_len * 2);
  memcpy(Buffer::Data(p_82_line2_buffer), pkt->line2, pkt->line2_len * 2);
  Handle< Value > p_82_line2_args[3] = { p_82_line2_buffer->handle_, Integer::New(pkt->line2_len * 2), Integer::New(0) };
  object->Set(String::New("line2"), buffer_constructor->NewInstance(3, p_82_line2_args));

  Buffer* p_82_line3_buffer = Buffer::New(pkt->line3_len * 2);
  memcpy(Buffer::Data(p_82_line3_buffer), pkt->line3, pkt->line3_len * 2);
  Handle< Value > p_82_line3_args[3] = { p_82_line3_buffer->handle_, Integer::New(pkt->line3_len * 2), Integer::New(0) };
  object->Set(String::New("line3"), buffer_constructor->NewInstance(3, p_82_line3_args));

  Buffer* p_82_line4_buffer = Buffer::New(pkt->line4_len * 2);
  memcpy(Buffer::Data(p_82_line4_buffer), pkt->line4, pkt->line4_len * 2);
  Handle< Value > p_82_line4_args[3] = { p_82_line4_buffer->handle_, Integer::New(pkt->line4_len * 2), Integer::New(0) };
  object->Set(String::New("line4"), buffer_constructor->NewInstance(3, p_82_line4_args));

  break;
}
case 0x83: {
  mcnet_packet_83_t* pkt = reinterpret_cast< mcnet_packet_83_t* >(packet);

  object->Set(String::New("data_len"), Boolean::New(pkt->data_len == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("type"), Number::New(pkt->type));

  object->Set(String::New("id"), Number::New(pkt->id));

  object->Set(String::New("data_len"), Number::New(pkt->data_len));

  Buffer* p_83_data_buffer = Buffer::New(pkt->data_len);
  memcpy(Buffer::Data(p_83_data_buffer), pkt->data, pkt->data_len);
  Handle< Value > p_83_data_args[3] = { p_83_data_buffer->handle_, Integer::New(pkt->data_len), Integer::New(0) };
  object->Set(String::New("data"), buffer_constructor->NewInstance(3, p_83_data_args));

  break;
}
case 0x84: {
  mcnet_packet_84_t* pkt = reinterpret_cast< mcnet_packet_84_t* >(packet);

  object->Set(String::New("action"), Boolean::New(pkt->action == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("x"), Number::New(pkt->x));

  object->Set(String::New("y"), Number::New(pkt->y));

  object->Set(String::New("z"), Number::New(pkt->z));

  object->Set(String::New("action"), Number::New(pkt->action));

  object->Set(String::New("custom1"), Number::New(pkt->custom1));

  object->Set(String::New("custom2"), Number::New(pkt->custom2));

  object->Set(String::New("custom3"), Number::New(pkt->custom3));

  break;
}
case 0xC8: {
  mcnet_packet_C8_t* pkt = reinterpret_cast< mcnet_packet_C8_t* >(packet);

  object->Set(String::New("amount"), Boolean::New(pkt->amount == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("statistic"), Number::New(pkt->statistic));

  object->Set(String::New("amount"), Number::New(pkt->amount));

  break;
}
case 0xC9: {
  mcnet_packet_C9_t* pkt = reinterpret_cast< mcnet_packet_C9_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("ping"), Number::New(pkt->ping));

  Buffer* p_C9_name_buffer = Buffer::New(pkt->name_len * 2);
  memcpy(Buffer::Data(p_C9_name_buffer), pkt->name, pkt->name_len * 2);
  Handle< Value > p_C9_name_args[3] = { p_C9_name_buffer->handle_, Integer::New(pkt->name_len * 2), Integer::New(0) };
  object->Set(String::New("name"), buffer_constructor->NewInstance(3, p_C9_name_args));

  break;
}
case 0xCA: {
  mcnet_packet_CA_t* pkt = reinterpret_cast< mcnet_packet_CA_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  break;
}
case 0xCB: {
  mcnet_packet_CB_t* pkt = reinterpret_cast< mcnet_packet_CB_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  Buffer* p_CB_text_buffer = Buffer::New(pkt->text_len * 2);
  memcpy(Buffer::Data(p_CB_text_buffer), pkt->text, pkt->text_len * 2);
  Handle< Value > p_CB_text_args[3] = { p_CB_text_buffer->handle_, Integer::New(pkt->text_len * 2), Integer::New(0) };
  object->Set(String::New("text"), buffer_constructor->NewInstance(3, p_CB_text_args));

  break;
}
case 0xCC: {
  mcnet_packet_CC_t* pkt = reinterpret_cast< mcnet_packet_CC_t* >(packet);

  object->Set(String::New("view_distance"), Boolean::New(pkt->view_distance == 1));

  object->Set(String::New("chat_flags"), Boolean::New(pkt->chat_flags == 1));

  object->Set(String::New("unknown"), Boolean::New(pkt->unknown == 1));

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("view_distance"), Number::New(pkt->view_distance));

  object->Set(String::New("chat_flags"), Number::New(pkt->chat_flags));

  object->Set(String::New("unknown"), Number::New(pkt->unknown));

  Buffer* p_CC_locale_buffer = Buffer::New(pkt->locale_len * 2);
  memcpy(Buffer::Data(p_CC_locale_buffer), pkt->locale, pkt->locale_len * 2);
  Handle< Value > p_CC_locale_args[3] = { p_CC_locale_buffer->handle_, Integer::New(pkt->locale_len * 2), Integer::New(0) };
  object->Set(String::New("locale"), buffer_constructor->NewInstance(3, p_CC_locale_args));

  break;
}
case 0xFA: {
  mcnet_packet_FA_t* pkt = reinterpret_cast< mcnet_packet_FA_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("data_length"), Number::New(pkt->data_length));

  Buffer* p_FA_channel_buffer = Buffer::New(pkt->channel_len * 2);
  memcpy(Buffer::Data(p_FA_channel_buffer), pkt->channel, pkt->channel_len * 2);
  Handle< Value > p_FA_channel_args[3] = { p_FA_channel_buffer->handle_, Integer::New(pkt->channel_len * 2), Integer::New(0) };
  object->Set(String::New("channel"), buffer_constructor->NewInstance(3, p_FA_channel_args));

  Buffer* p_FA_data_buffer = Buffer::New(pkt->data_length);
  memcpy(Buffer::Data(p_FA_data_buffer), pkt->data, pkt->data_length);
  Handle< Value > p_FA_data_args[3] = { p_FA_data_buffer->handle_, Integer::New(pkt->data_length), Integer::New(0) };
  object->Set(String::New("data"), buffer_constructor->NewInstance(3, p_FA_data_args));

  break;
}
case 0xFC: {
  mcnet_packet_FC_t* pkt = reinterpret_cast< mcnet_packet_FC_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("shared_secret_len"), Number::New(pkt->shared_secret_len));

  Buffer* p_FC_shared_secret_buffer = Buffer::New(pkt->shared_secret_len);
  memcpy(Buffer::Data(p_FC_shared_secret_buffer), pkt->shared_secret, pkt->shared_secret_len);
  Handle< Value > p_FC_shared_secret_args[3] = { p_FC_shared_secret_buffer->handle_, Integer::New(pkt->shared_secret_len), Integer::New(0) };
  object->Set(String::New("shared_secret"), buffer_constructor->NewInstance(3, p_FC_shared_secret_args));

  break;
}
case 0xFD: {
  mcnet_packet_FD_t* pkt = reinterpret_cast< mcnet_packet_FD_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  object->Set(String::New("public_key_len"), Number::New(pkt->public_key_len));

  Buffer* p_FD_server_id_buffer = Buffer::New(pkt->server_id_len * 2);
  memcpy(Buffer::Data(p_FD_server_id_buffer), pkt->server_id, pkt->server_id_len * 2);
  Handle< Value > p_FD_server_id_args[3] = { p_FD_server_id_buffer->handle_, Integer::New(pkt->server_id_len * 2), Integer::New(0) };
  object->Set(String::New("server_id"), buffer_constructor->NewInstance(3, p_FD_server_id_args));

  Buffer* p_FD_public_key_buffer = Buffer::New(pkt->public_key_len);
  memcpy(Buffer::Data(p_FD_public_key_buffer), pkt->public_key, pkt->public_key_len);
  Handle< Value > p_FD_public_key_args[3] = { p_FD_public_key_buffer->handle_, Integer::New(pkt->public_key_len), Integer::New(0) };
  object->Set(String::New("public_key"), buffer_constructor->NewInstance(3, p_FD_public_key_args));

  break;
}
case 0xFE: {
  mcnet_packet_FE_t* pkt = reinterpret_cast< mcnet_packet_FE_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  break;
}
case 0xFF: {
  mcnet_packet_FF_t* pkt = reinterpret_cast< mcnet_packet_FF_t* >(packet);

  object->Set(String::New("pid"), Number::New(pkt->pid));

  Buffer* p_FF_reason_buffer = Buffer::New(pkt->reason_len * 2);
  memcpy(Buffer::Data(p_FF_reason_buffer), pkt->reason, pkt->reason_len * 2);
  Handle< Value > p_FF_reason_args[3] = { p_FF_reason_buffer->handle_, Integer::New(pkt->reason_len * 2), Integer::New(0) };
  object->Set(String::New("reason"), buffer_constructor->NewInstance(3, p_FF_reason_args));

  break;
}
