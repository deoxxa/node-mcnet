#!/usr/bin/env node

var events = require("events"),
    mcnet = require("./build/Release/mcnet");

for (var k in events.EventEmitter.prototype) {
  mcnet.Parser.prototype[k] = events.EventEmitter.prototype[k];
}

var parser = new mcnet.Parser();

parser.on("packet", function(packet) {
  console.log(["packet", packet]);
});

parser.on("error", function(err) {
  console.log(["error", err]);
});

var buf = new Buffer([
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x61, 0x00, 0x73, 0x00, 0x64, 0x00, 0x66, 0x02, 0x03, 0x04, 0x05, 0x06,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x61, 0x00, 0x73, 0x00, 0x64, 0x00, 0x66, 0x02, 0x03, 0x04, 0x05, 0x06,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x61, 0x00, 0x73, 0x00, 0x64, 0x00, 0x66, 0x02, 0x03, 0x04, 0x05, 0x06,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x61, 0x00, 0x73, 0x00, 0x64, 0x00, 0x66, 0x02, 0x03, 0x04, 0x05, 0x06,
  0xFF, 0x00, 0x04, 0x00, 0x61, 0x00, 0x73, 0x00, 0x64, 0x00, 0x66,
  0x33, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x01, 0x02, 0x03, 0x04,
  0x28, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x7F,
]);

var res;
while (res = parser.execute(buf)) {
  if (res == parser.EAGAIN) {
    break;
  } else if (res == parser.EINVALID) {
    break;
  } else {
    if (buf.length <= res) {
      buf = new Buffer(0);
    } else {
      buf = buf.slice(res);
    }
  }
}
