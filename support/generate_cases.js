#!/usr/bin/env node

function extract_packets(str) {
  return str.split(/\n/).filter(function(s) { return s.match(/^PACKET/); }).map(packet_to_cpp);
}

function packet_to_cpp(str) {
  var info = str.match(/PACKET\(([0-9A-F]+), (.*)\)/);

  var boolean_fields = (info[2].match(/BYTE\(.+?\)/g) || []).map(function(f) {
    var m = f.match(/\((.+?)\)/);
    return boolean_field_to_cpp(m[1]);
  });

  var number_fields = ["BYTE(pid)"].concat((info[2].match(/(?:BYTE|UBYTE|SHORT|USHORT|INT|LONG|FLOAT|DOUBLE)\(.+?\)/g) || [])).map(function(f) {
    var m = f.match(/\((.+?)\)/);
    return number_field_to_cpp(m[1]);
  });

  var string_fields = (info[2].match(/STRING(?:8|16)\(.+?\)/g) || []).map(function(f) {
    var m = f.match(/STRING(8|16)\((.+?)\)/);
    return string_field_to_cpp(m[2], (parseInt(m[1], 10) / 8));
  });

  var blob_fields = (info[2].match(/BLOB\(.+?\)/) || []).map(function(f) {
    var m = f.match(/\((.+?), (.+?)\)/);
    return blob_field_to_cpp(m[1], m[2]);
  });

  return [
    "case 0x__ID__: {",
  ].concat([
    [
      "  mcnet_packet___ID___t* pkt = reinterpret_cast< mcnet_packet___ID___t* >(packet);",
    ].concat(boolean_fields).concat(number_fields).concat(string_fields).concat(blob_fields).concat([
      "  break;"
    ]).join("\n\n"),
  ]).concat([
    "}",
  ]).join("\n").replace(/__ID__/g, info[1]);
}

function boolean_field_to_cpp(name) {
  return '  object->Set(String::New("__NAME__"), Boolean::New(pkt->__NAME__ == 1));'.replace(/__NAME__/g, name);
}

function number_field_to_cpp(name) {
  return '  object->Set(String::New("__NAME__"), Number::New(pkt->__NAME__));'.replace(/__NAME__/g, name);
}

function string_field_to_cpp(name, width) {
  return blob_field_to_cpp(name, name + "_len * " + width.toString());
}

function blob_field_to_cpp(name, len) {
  return [
    '  Buffer* p___ID_____NAME___buffer = Buffer::New(pkt->__LEN__);',
    '  memcpy(Buffer::Data(p___ID_____NAME___buffer), pkt->__NAME__, pkt->__LEN__);',
    '  Handle< Value > p___ID_____NAME___args[3] = { p___ID_____NAME___buffer->handle_, Integer::New(pkt->__LEN__), Integer::New(0) };',
    '  object->Set(String::New("__NAME__"), buffer_constructor->NewInstance(3, p___ID_____NAME___args));',
  ].join("\n").replace(/__NAME__/g, name).replace(/__LEN__/g, len);
}

if (process.argv.length < 3) {
  console.warn("Usage: ./generate_cases.js /path/to/packets.h");
  process.exit(1);
}

var str = require("fs").readFileSync(process.argv[2]).toString();

console.log("/****************************************/");
console.log("/* THIS FILE IS AUTOMATICALLY GENERATED */");
console.log("/* PLEASE SEE support/generate_cases.js */");
console.log("/****************************************/");
console.log("");

console.log(extract_packets(str).join("\n"));
